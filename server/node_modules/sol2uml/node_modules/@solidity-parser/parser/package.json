{
  "_args": [
    [
      "@solidity-parser/parser@github:solidity-parser/parser",
      "/home/willi/Documents/server/node_modules/sol2uml"
    ]
  ],
  "_from": "solidity-parser/parser",
  "_id": "@solidity-parser/parser@0.6.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/sol2uml/@solidity-parser/parser",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/solidity-parser/parser/master/package.json",
      "gitUrl": "git://github.com/solidity-parser/parser.git",
      "httpsUrl": "git+https://github.com/solidity-parser/parser.git",
      "shortcut": "github:solidity-parser/parser",
      "ssh": "git@github.com:solidity-parser/parser.git",
      "sshUrl": "git+ssh://git@github.com/solidity-parser/parser.git",
      "type": "github"
    },
    "name": "@solidity-parser/parser",
    "raw": "@solidity-parser/parser@github:solidity-parser/parser",
    "rawSpec": "github:solidity-parser/parser",
    "scope": "@solidity-parser",
    "spec": "github:solidity-parser/parser",
    "type": "hosted"
  },
  "_requiredBy": [
    "/sol2uml"
  ],
  "_resolved": "git://github.com/solidity-parser/parser.git#8fd37b877003a1e1b3ca061f5830601fe5487a47",
  "_shasum": "61c6ac37b89ac7092539242577b211966c675608",
  "_shrinkwrap": null,
  "_spec": "@solidity-parser/parser@github:solidity-parser/parser",
  "_where": "/home/willi/Documents/server/node_modules/sol2uml",
  "authors": [
    "Federico Bond <federicobond@gmail.com>",
    "Franco Victorio",
    "Gonçalo Sá <goncalo.sa@consensys.net>",
    "Nick Addison"
  ],
  "bugs": {
    "url": "https://github.com/solidity-parser/parser/issues"
  },
  "dependencies": {},
  "description": "A Solidity parser built from a robust ANTLR 4 grammar",
  "devDependencies": {
    "@babel/core": "^7.9.0",
    "@babel/preset-env": "^7.9.0",
    "babel-cli": "^6.26.0",
    "babel-loader": "^8.1.0",
    "babel-plugin-inline-import": "^3.0.0",
    "babel-preset-env": "^1.7.0",
    "chai": "^4.2.0",
    "eslint": "^6.2.2",
    "eslint-plugin-import": "^2.18.2",
    "eslint-plugin-node": "^9.2.0",
    "eslint-plugin-promise": "^4.2.1",
    "eslint-plugin-standard": "^4.0.1",
    "mocha": "^6.2.0",
    "nyc": "^14.1.1",
    "prettier": "^1.18.2",
    "raw-loader": "^4.0.0",
    "tslint": "5.19.0",
    "tslint-config-prettier": "^1.18.0",
    "typescript": "3.6.2",
    "webpack": "^4.42.1",
    "webpack-cli": "^3.3.11",
    "yarn": "^1.17.3"
  },
  "gitHead": "8fd37b877003a1e1b3ca061f5830601fe5487a47",
  "homepage": "https://github.com/solidity-parser/parser",
  "license": "MIT",
  "main": "dist/index.js",
  "name": "@solidity-parser/parser",
  "nyc": {
    "include": [
      "src/*.js"
    ]
  },
  "optionalDependencies": {},
  "readme": "# Solidity Parser for JavaScript\n\n[![npm version](https://badge.fury.io/js/%40solidity-parser%2Fparser.svg)](https://badge.fury.io/js/%40solidity-parser%2Fparser)\n\nA JavaScript package for parsing [Solidity](https://solidity.readthedocs.io/) code using [ANTLR (ANother Tool for Language Recognition) ](https://www.antlr.org/) grammar.\n\nThis is a fork of [@federicobond](https://github.com/federicobond)'s original [repo](https://github.com/federicobond/solidity-parser-antlr),\nwith some extra features taken from [Consensys Diligence's alternative fork](https://github.com/consensys/solidity-parser-antlr).\n\n## Installation\n\nThe following installation options assume [Node.js](https://nodejs.org/en/download/) has already been installed.\n\nUsing [Node Package Manager (npm)](https://www.npmjs.com/).\n\n```\nnpm install @solidity-parser/parser\n```\n\nUsing [yarn](https://yarnpkg.com/)\n\n```\nyarn add @solidity-parser/parser\n```\n\n## Usage\n\n```javascript\nconst parser = require('@solidity-parser/parser');\n\nconst input = `\n    contract test {\n        uint256 a;\n        function f() {}\n    }\n`\ntry {\n    const ast = parser.parse(input)\n    console.log(ast)\n} catch (e) {\n    if (e instanceof parser.ParserError) {\n        console.error(e.errors)\n    }\n}\n```\n\nThe `parse` method also accepts a second argument which lets you specify the\nfollowing options, in a style similar to the _esprima_ API:\n\n| Key      | Type    | Default | Description                                                                                                                                                                                          |\n|----------|---------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| tolerant | Boolean | false   | When set to `true` it will collect syntax errors and place them in a list under the key `errors` inside the root node of the returned AST. Otherwise, it will raise a `parser.ParserError`.          |\n| loc      | Boolean | false   | When set to `true`, it will add location information to each node, with start and stop keys that contain the corresponding line and column numbers. Column numbers start from 0, lines start from 1. |\n| range    | Boolean | false   | When set to `true`, it will add range information to each node, which consists of a two-element array with start and stop character indexes in the input.                                            |\n\n\n### Example with location information\n\n```javascript\nparser.parse('contract test { uint a; }', { loc: true })\n\n// { type: 'SourceUnit',\n//   children:\n//    [ { type: 'ContractDefinition',\n//        name: 'test',\n//        baseContracts: [],\n//        subNodes: [Array],\n//        kind: 'contract',\n//        loc: [Object] } ],\n//   loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 24 } } }\n\n```\n\n### Example using a visitor to walk over the AST\n\n```javascript\nvar ast = parser.parse('contract test { uint a; }')\n\n// output the path of each import found\nparser.visit(ast, {\n  ImportDirective: function(node) {\n    console.log(node.path)\n  }\n})\n```\n\n## Contribution\n\nThis project is dependant on the [@solidity-parser/antlr](https://github.com/solidity-parser/antlr) repository via a git submodule. To clone this repository and the submodule, run\n\n```\ngit clone --recursive\n```\n\nIf you have already cloned this repo, you can load the submodule with \n\n```\ngit submodule update --init\n```\n\nThis project can be linked to a forked `@solidity-parser/antlr` project by editing the url in the [.gitmodules](.gitmodules) file to point to the forked repo and running\n\n```\ngit submodule sync\n```\n\nThe Solidity ANTLR file [Solidity.g4](./antlr/Solidity.g4) can be built with the following. This will also download the ANTLR Java Archive (jar) file to `antlr/antlr4.jar` if it doesn't already exist. The generated ANTLR tokens and JavaScript files are copied the [src](./src) folder.\n\n```\nyarn run antlr\n```\n\nThe files to be distributed with the npm package are in the `dist` folder and built by running\n\n```\nyarn run build\n```\n\nThe [mocha](https://mochajs.org/) tests under the [test](./test) folder can be run with the following. This includes parsing the [test.sol](./test/test.sol) Solidity file.\n\n```\nyarn run test\n```\n\n## Used by\n\n* [sol2uml](https://github.com/naddison36/sol2uml)\n* [Solhint](https://github.com/protofire/solhint/)\n* [solidity-coverage](https://github.com/sc-forks/solidity-coverage)\n* [prettier-solidity](https://github.com/prettier-solidity/prettier-plugin-solidity/)\n* [Buidler](https://github.com/nomiclabs/buidler/)\n* [eth-gas-reporter](https://github.com/cgewecke/eth-gas-reporter)\n\n## License\n\n[MIT](./LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/solidity-parser/parser.git"
  },
  "scripts": {
    "antlr": "sh scripts/antlr.sh",
    "build": "rm -rf dist && babel --out-dir=dist src --copy-files",
    "build:browser": "webpack",
    "eslint": "eslint src",
    "prepare": "yarn build && yarn build:browser",
    "pretest": "eslint src && tslint-config-prettier-check ./tslint.json",
    "prettier": "find src -name *.js | egrep -v '^src/(lib|antlr4)/' | xargs prettier --no-semi --single-quote --write",
    "test": "nyc mocha --require babel-register",
    "tslint": "tslint-config-prettier-check ./tslint.json"
  },
  "types": "./index.d.ts",
  "version": "0.6.0"
}
